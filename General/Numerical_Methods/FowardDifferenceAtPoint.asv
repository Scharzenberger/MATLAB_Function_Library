function dfdx = FowardDifferenceAtPoint(fs, xs, n, k, dir)

% Collect size information.
dims = size(fs);
num_dims = length(dims);

% Define the starting index values.
x_indexes0 = AbsInd2DimInd( dims, k );
f_indexes0 = AbsInd2DimInd( dims, k ); f_indexes0(dir) = f_indexes0(dir) + n;

% Initialize the starting index values.
x_indexes = x_indexes0;
f_indexes = f_indexes0;

% Initialize the dx and df calculations.
dx = 1;
df = fs(f_indexes0);

% Compute the dx and df approximations via an nth order foward difference method.
for i = 1:n             % Iterate through each of the orders...
    
    % Advance the x index variable.
    x_indexes(dir) = x_indexes0(dir) + i;
    
    % Advance the f index variable.
    f_indexes(dir) = f_indexes0(dir) - i;
    
    % Approximate the dx term.
    dx = dx.*(xs(k + i) - xs(k + i - 1));
    
    % Approximate the df term.
    df = df + ((-1).^i).*nchoosek(n, i).*fs(k + n - i);
    
%     % Approximate the dx term.
%     dx = dx.*(xs(k + i) - xs(k + i - 1));
%     
%     % Approximate the df term.
%     df = df + ((-1).^i).*nchoosek(n, i).*fs(k + n - i);
    
end

% Approximate the nth order df/dx calculation.
dfdx = df./dx;


end

